// find prime numbers using sieve of eratosthenes
// create an array to store number from 2 to n
// mark all as valid primes 
// STEP 1: start from p= 2 and cross of all multiples of p in the array
// increment array to find the next valid p (this is also a prime)
// repeat the step1 with new p

#include<iostream>
#include<ctime>
#include<bits/stdc++.h>
using namespace std;

void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    bool prime[n+1];
    memset(prime, true, sizeof(prime));
 
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 
     //Print all prime numbers
    for (int p=2; p<=n; p++)
       if (prime[p])
          cout << p << " ";
}


void sieveofEratosthenes(int n)
{
	bool prime[n+1];
	for(int i=0;i<=n;i++)
	prime[i]=1;
	
	int p=2;
	while(p<n)
	{
		cout<<p<<" ";
		for(int i=p+p;i<=n;i=i+p)
		prime[i]=0;
		++p;
		while(!prime[p])
		++p;
	}
}

int main()
{
	cout<<"\nEnter the number : ";
	int n;
	cin>>n;
	clock_t start=clock();
	sieveofEratosthenes(n);
	clock_t stop=clock();
	cout<<"\nThe time lapsed is : "<<((float)(stop-start)/CLOCKS_PER_SEC)<<" sec";
	start=clock();
	SieveOfEratosthenes(n);
	stop=clock();
	cout<<"\nThe time lapsed is : "<<((float)(stop-start)/CLOCKS_PER_SEC)<<" sec";
}
