// Given a string count the no of counter-clockwise rotation required to convert the stirng into a palindrome

.............This is a navie approach with O(n^3) Complexity

// Generate next palindrome prime given a no. n


#include<bits/stdc++.h>
using namespace std;

bool isPalindrome(string s,int len)
{
	int i=0,j=len-1;
	while(i<j)
	{
		if(s[i]==s[j])
		++i,--j;
		else
		return false;
		
	}
	return true;
}


int NoOfRotation(string s)
{
	int len=s.length();
	int count=0;
	
	while(!isPalindrome(s,len))
	{
		char temp=s[0];
		for(int i=0;i<len-1;i++)
		s[i]=s[i+1];
		s[len-1]=temp;
		++count;
	}
	
	return count;
}

int main()
{
	string str="bccbbaab";
	cout<<NoOfRotation(str);
	
}
