https://www.geeksforgeeks.org/reverse-tree-path/
Wrote my own solution and I think it is better and easier than what is provided on GFG

.........................................

// CPP program to Reverse Tree path 
#include <bits/stdc++.h> 
using namespace std; 
 
struct Node { 
	int data; 
	struct Node *left, *right; 
}; 

 
void inorder(Node* root) 
{ 
	if (root != NULL) { 
		inorder(root->left); 
		cout << root->data << " "; 
		inorder(root->right); 
	} 
} 


Node* newNode(int data) 
{ 
	Node* temp = new Node; 
	temp->data = data; 
	temp->left = temp->right = NULL; 
	return temp; 
} 

bool trav(Node* root,vector<Node*> &v,int data)
{
	if(!root)
	return false;
	v.push_back(root);
	if(root->data==data)
	return true;

	if(trav(root->left,v,data) || trav(root->right,v,data));
	return true;

	
	v.pop_back();
	return false;
}

void h(Node* root,int data)
{
	vector<Node*> v;
	trav(root,v,data);
	int len=v.size();
	for(int i=0,j=len-1;i<j;i++,j--)
	{
		int temp=v[i]->data;
		v[i]->data=v[j]->data;
		v[j]->data=temp;
	}
}


int main() 
{ 
	// Let us create binary tree shown in above diagram 
	Node* root = newNode(7); 
	root->left = newNode(6); 
	root->right = newNode(5); 
	root->left->left = newNode(4); 
	root->left->right = newNode(3); 
	root->right->left = newNode(2); 
	root->right->right = newNode(1); 



	int data = 4; 

	cout<<"\nBefor change the tree is : ";
	inorder(root); 
	h(root, data); 
	cout<<"\nNow the tree is: ";

	inorder(root); 
	return 0; 
} 
