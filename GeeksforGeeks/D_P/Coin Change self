This is my intuitive solution. there is another approach to solve this prob on GFG but as for now i'm not able to get the knack of it.
https://www.geeksforgeeks.org/coin-change-dp-7/



...................................................................


// Coin change problem
// find total no of ways in which you can get the change of N using given denominations

#include<bits/stdc++.h>
using namespace std;

int coinchange(int coin[],int n,int N)
{
	int dp[n+1][N+1];
	for(int i=0;i<=n;i++)
	dp[i][0]=1;
	for(int j=0;j<=N;j++)
	dp[0][j]=0;
	
	
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=N;j++)
		{
			if(coin[i-1]>j)
			dp[i][j]=dp[i-1][j];
			else
			dp[i][j]=dp[i-1][j]+dp[i][j-coin[i-1]];
		}
	}
	
	return dp[n][N];
}

int main()
{
	int n=5;
	int coin[n]={1,2,3,5,8};
	int N=100;
	cout<<"\nTotal ways to get the change of "<<N<<" is : "<<coinchange(coin,n,N);
}
