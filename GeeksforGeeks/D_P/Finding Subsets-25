


........................This is the recursive solution.............................

// Subset sum problem
// Given a set and a value findout if there is any subset which adds up to the value
// The set contains only non-negative no.s
// Find the recurrence relation is that at each poing I Have two choice either I pick the no. or I don't pick the no.
// I solve for both and if any one of them returns true there exists a set
// F(n,sum)=F(n-1,sum)||F(n-1,sum-a[n])

#include<bits/stdc++.h>
using namespace std;

bool solve(int a[],int n,int sum)
{
	if(sum==0)
	return true;
	if(n<=0 && sum>=1)
	return false;
	if(sum<0)
	return false;
	
	if(solve(a,n-1,sum))
	return true;
	else if(solve(a,n-1,sum-a[n-1]))
	return true;
	return false;
	
}

int main()
{
	int n=6;
	int a[n]={3, 34, 4, 12, 5, 62};
	int sum=7;
	if(solve(a,n,sum))
	cout<<"\nSubset exists ";
	else
	cout<<"\nSubset does not exists ";
}


..................................DP...............................................

// Subset sum problem
// Given a set and a value findout if there is any subset which adds up to the value
// The set contains only non-negative no.s
// Find the recurrence relation is that at each poing I Have two choice either I pick the no. or I don't pick the no.
// I solve for both and if any one of them returns true there exists a set
// F(n,sum)=F(n-1,sum)||F(n-1,sum-a[n])

#include<bits/stdc++.h>
using namespace std;

bool solve(int a[],int n,int sum)
{
	bool dp[n+1][sum+1];
	
	for(int i=0;i<=n;i++)
	dp[i][0]=true;
	for(int i=1;i<=sum;i++)
	dp[0][i]=false;
	
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=sum;j++)
		{
			if(j<a[i-1])
			dp[i][j]=dp[i-1][j];
			else
			{
				dp[i][j]=dp[i-1][j] || dp[i-1][j-a[i-1]];
			}
		}
	}
	cout<<"\nThe table is: \n";
	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=sum;j++)
		cout<<dp[i][j]<<" ";
		cout<<"\n";
	}
	
	return dp[n][sum];
	
}

int main()
{
	int n=6;
	int a[n]={3, 34, 4, 12, 5, 62};
	int sum=9;
	if(solve(a,n,sum))
	cout<<"\nSubset exists ";
	else
	cout<<"\nSubset does not exists ";
}
