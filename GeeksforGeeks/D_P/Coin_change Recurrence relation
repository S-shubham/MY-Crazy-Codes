Recurrence relation for coin change

...................................................................
// Coin change problem using recursive solution
// Finding the recurrence relation is the most important aspect of DP
// For this problem the recurrence relation is :
// Either I choose the last coing or I don't
// soln=count(s[],m-1,n)+count(s[],m,n-s[m])

#include<bits/stdc++.h>
using namespace std;

int count(int s[],int m,int n)
{
	if(n==0)
	return 1;
	if(n<0)
	return 0;
	if(m<=0 && n>=1)
	return 0;
	
	return count(s,m,n-s[m-1])+count(s,m-1,n);
}

int main()
{
	int n=3;
	int s[n]={1,2,3};
	int N=4;
	cout<<count(s,3,4);
}
